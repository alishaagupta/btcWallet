/// <reference types="node" />
import { IPrivateKey } from './interfaces';
import { VirgilCrypto, VirgilPrivateKey } from './VirgilCrypto';
/**
 * Class implementing operations required to convert between raw
 * private key material and private key objects and vice versa
 * (i.e. the `IPrivateKeyExporter` interface from
 * {@link https://bit.ly/2KFRmT8|virgil-sdk}), using {@link VirgilCrypto}.
 */
export declare class VirgilPrivateKeyExporter {
    private readonly virgilCrypto;
    password?: string | undefined;
    /**
     * Initializes the new `VirgilPrivateKeyExporter`
     * @param {VirgilCrypto} virgilCrypto - VirgilCrypto instance, providing
     * implementation of crypto operations.
     * @param {string} [password] - Optional password used to encrypt the key
     * before export and decrypt before import.
     * NOTE: do NOT use the default (no password), unless your storage/transport
     * channel is secure.
     */
    constructor(virgilCrypto: VirgilCrypto, password?: string | undefined);
    /**
     * Exports private key material in DER format from the given private key object.
     *
     * @param {IPrivateKey} key - The private key object to export the key material from.
     * @returns {Buffer} - The private key material in DER format.
     */
    exportPrivateKey(key: IPrivateKey): Buffer;
    /**
     * Creates a {@link VirgilPrivateKey} object from private key material in PEM or DER format.
     *
     * @param {Buffer | string} keyData - The private key material. If `keyData` is
     * a string, base64 encoding is assumed.
     * @returns {VirgilPrivateKey} The private key object.
     */
    importPrivateKey(keyData: Buffer | string): VirgilPrivateKey;
}
