/// <reference types="node" />
/**
 * Native type wrapper utilities.
 *
 * @hidden
 */
export interface WrapperUtils {
    isBuffer(obj: any): boolean;
    bufferToVirgilByteArray(buf: Buffer): any;
    isVirgilByteArray(obj: any): boolean;
    virgilByteArrayToBuffer(arr: any): Buffer;
}
/**
 * Interface containing the set of functions allowing to wrap raw
 * VirgilCrypto functions so that they are safe to call with
 * `Buffer`s as binary data arguments and return binary data as
 * `Buffer`s instead of VirgilByteArray.
 * In the browser, the wrapper functions also automatically free
 * memory allocated for VirgilByteArray instances.
 *
 * @hidden
 */
export interface NativeTypeWrapper {
    /**
     * Creates "safe" versions of `methods` on the `ctor`'s prototype.
     * New methods will have the "Safe" suffix, original methods are
     * not modified.
     * @param {Function} ctor - Constructor function whose prototype to extend.
     * @param {string[]} methods - Array of method names to create "safe" versions of.
     */
    createSafeInstanceMethods: (ctor: Function, methods: string[]) => void;
    /**
     * Creates "safe" versions of `methods` on the `ctor` function (i.e. static
     * methods). New methods will have the "Safe" suffix, original methods are
     * not modified.
     * @param {Function} ctor - Constructor function to extend.
     * @param {string[]} methods - Array of static method names to create "safe" versions of.
     */
    createSafeStaticMethods: (ctor: (Function & {
        [p: string]: any;
    }), methods: string[]) => void;
    /**
     * Utility functions to convert to\from library types.
     */
    utils: WrapperUtils;
}
/**
 * Creates a wrapper object for the native library `lib`.
 *
 * @hidden
 *
 * @param {any} lib - Native VirgilCrypto library (browser or Node.js).
 * @returns {NativeTypeWrapper} The wrapper object.
 */
export declare function createNativeTypeWrapper(lib: any): NativeTypeWrapper;
